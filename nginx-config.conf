# Nginx configuration for performance optimization

# Enable brotli compression if module is available
brotli on;
brotli_comp_level 6;
brotli_static on;
brotli_types
  text/plain
  text/css
  text/javascript
  application/javascript
  application/json
  application/xml
  application/xhtml+xml
  application/rss+xml
  application/atom+xml
  image/svg+xml;

# Enable gzip compression (fallback for browsers without brotli support)
gzip on;
gzip_comp_level 6;
gzip_min_length 256;
gzip_proxied any;
gzip_vary on;
gzip_types
  application/atom+xml
  application/javascript
  application/json
  application/ld+json
  application/manifest+json
  application/rss+xml
  application/vnd.geo+json
  application/vnd.ms-fontobject
  application/x-font-ttf
  application/x-web-app-manifest+json
  application/xhtml+xml
  application/xml
  font/opentype
  image/bmp
  image/svg+xml
  image/x-icon
  text/cache-manifest
  text/css
  text/plain
  text/vcard
  text/vnd.rim.location.xloc
  text/vtt
  text/x-component
  text/x-cross-domain-policy;

# Cache control for static assets with different cache times
# Long-lived assets (1 year)
location ~* \.(woff|woff2|ttf|eot|svg)$ {
    expires 1y;
    add_header Cache-Control "public, max-age=31536000, immutable";
    access_log off;
}

# Medium-lived assets (1 month)
location ~* \.(jpg|jpeg|png|webp|avif|gif|ico|css|js)$ {
    expires 1M;
    add_header Cache-Control "public, max-age=2592000";
    access_log off;
}

# CORS headers
add_header Access-Control-Allow-Origin "*";
add_header Access-Control-Allow-Methods "GET, POST, OPTIONS";
add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range";

# Security headers
add_header X-Content-Type-Options "nosniff";
add_header X-XSS-Protection "1; mode=block";
add_header X-Frame-Options "SAMEORIGIN";
add_header Referrer-Policy "strict-origin-when-cross-origin";
add_header Permissions-Policy "camera=(), microphone=(), geolocation=()";

# Serve WebP/AVIF images if supported
location ~* ^/Images/(.+)\.(png|jpg|jpeg)$ {
    add_header Vary Accept;
    
    # Check for AVIF support first
    if ($http_accept ~* "image/avif") {
        set $avif_file "/Images/optimized/$1-optimized.avif";
        if (-f $document_root$avif_file) {
            rewrite ^ $avif_file break;
        }
    }
    
    # Then check for WebP support
    if ($http_accept ~* "image/webp") {
        set $webp_file "/Images/optimized/$1-optimized.webp";
        if (-f $document_root$webp_file) {
            rewrite ^ $webp_file break;
        }
    }
    
    # Finally serve original
    try_files $uri =404;
}

# HTTP/2 server push for critical resources
http2_push_preload on; 